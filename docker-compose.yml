version: "3.9"

services:
  nginx:
    build:
      context: ./nginx/
    networks:
      - nginx_net
      - frontend_net
    ports:
      - "${NGINX_PORT:-80}:80"
    volumes:
      - static_files:/app/static
    depends_on:
      app:
        condition: service_healthy

  app:
    build: .
    image: "${DOCKER_IMG}"
    networks:
      - frontend_net
      - backend_net
    environment:
      FLASK_ENV: "production"
      DB_HOST: "db"
      DB_USER: "${DB_USER:-dbuser}"
      DB_PASSWORD: "${DB_PASSWORD:-dbpass}"
      DB_NAME: "${DB_NAME:-taskit}"
      DB_PORT: "${DB_PORT:-5431}"
      PORT: 5000
    volumes:
      - static_files:/app/app/static
    depends_on:
      migrations:
        condition: service_completed_successfully
    healthcheck:
      test:
        [
          "CMD",
          "wget",
          "--spider",
          "--quiet",
          "--tries=1",
          "--timeout=10",
          "http://localhost:5000/health",
        ]
      interval: 5s
      timeout: 5s
      retries: 10

  migrations:
    build: .
    image: "${DOCKER_IMG}"
    networks:
      - backend_net
    command: ["-m", "flask", "db", "upgrade"]
    environment:
      DB_HOST: "db"
      DB_USER: "${DB_USER:-dbuser}"
      DB_PASSWORD: "${DB_PASSWORD:-dbpass}"
      DB_NAME: "${DB_NAME:-taskit}"
      DB_PORT: "${DB_PORT:-5431}"
      PORT: 5000
    depends_on:
      db:
        condition: service_healthy

  db:
    image: "postgres:16.1"
    networks:
      - backend_net
    environment:
      POSTGRES_USER: "${DB_USER:-dbuser}"
      POSTGRES_PASSWORD: "${DB_PASSWORD:-dbpass}"
      POSTGRES_DB: "${DB_NAME:-taskit}"
      PGPORT: "${DB_PORT:-5431}"
      PGDATA: /var/lib/postgresql/data/pgdata
    volumes:
      - db_data:/var/lib/postgresql/data
    healthcheck:
      test:
        [
          "CMD",
          "pg_isready",
          "-U",
          "${DB_USER:-dbuser}",
          "-d",
          "${DB_NAME:-taskit}",
          "-h",
          "localhost",
          "-p",
          "${DB_PORT:-5431}",
        ]
      timeout: 5s
      interval: 5s
      retries: 10

networks:
  nginx_net:
    name: "${NGINX_NET}"
  frontend_net:
  backend_net:

volumes:
  db_data:
    name: db_data
  static_files:
    name: static_files
